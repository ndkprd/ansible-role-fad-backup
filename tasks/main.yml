---
# tasks file for fortiadc-backup

- name: FortiADC Configuration Backup
  tags: [fad_backup]
  block:

    - name: Pull the configuration file using REST API.
      ansible.builtin.uri:
        method: GET
        url: "{{ fad_base_url + fad_api_endpoint.backup_config }}"
        body_format: "{{ fad_api_uri_params.body_format }}"
        validate_certs: "{{ fad_api_uri_params.validate_certs }}"
        return_content: "{{ fad_api_uri_params.return_content }}"
        status_code: "{{ fad_api_uri_params.status_code }}"
        headers: "{{ fad_api_header }}"
      register: fad_backup_result

    - name: Make sure the backup directory exist.
      ansible.builtin.file:
        path: "{{ backup_dir }}/FAD_BACKUP_{{ datestamp }}"
        state: directory
        mode: "0660"
      run_once: true

    - name: Write the configuration (in zip binary) into a file.
      ansible.builtin.template:
        src: config_backup.zip.j2
        dest: "{{ backup_dir }}/FAD_BACKUP_{{ datestamp }}/{{ datestamp }}_{{ ansible_host }}.zip"
        mode: preserve

    - name: Zip all the configuration backup files.
      community.general.archive:
        path: "{{ backup_dir }}/FAD_BACKUP_{{ datestamp }}"
        dest: "{{ backup_dir }}/FAD_BACKUP_{{ datestamp }}.zip"
        mode: "0660"
      run_once: true

    - name: Send the the zipped file via SMTP.
      community.general.mail:
        host: "{{ mail.smtp_server }}"
        port: "{{ mail.smtp_port }}"
        username: "{{ mail.username | default(omit) }}"
        password: "{{ mail.password | default(omit) }}"
        from: "{{ mail.sender }}"
        to: "{{ mail.recipient }}"
        subject: "Configuration Backup for FortiADC @ {{ datestamp }}"
        body: "{{ mail.body }}"
        attach: ["{{ backup_dir }}/FAD_BACKUP_{{ datestamp }}.zip"]
      run_once: true
